import cv2
import mediapipe as mp
import numpy as np

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1)
mp_draw = mp.solutions.drawing_utils

# Video settings
frame_width = 640
frame_height = 480
button_height = 100
button_spacing = 20

# Button configuration
button_names = ["Black", "Red", "Green", "Blue", "Eraser", "Trash"]
button_files = {
    "Black": "black.png",
    "Red": "red.png",
    "Green": "green.png",
    "Blue": "blue.png",
    "Eraser": "eraser.png",
    "Trash": "trash.png"
}
button_images = {
    name: cv2.resize(cv2.imread(button_files[name]), (80, button_height))
    for name in button_names
}
button_coords = {}

# Drawing settings
canvas = np.zeros((frame_height, frame_width, 3), dtype=np.uint8)
drawn_mask = np.zeros((frame_height, frame_width), dtype=np.uint8)
draw_color = (0, 0, 0) # default black
prev_x, prev_y = 0, 0
selected_button = "Black"
eraser_mode = False

# Capture video
cap = cv2.VideoCapture(0)
cap.set(3, frame_width)
cap.set(4, frame_height)

while True:
    success, frame = cap.read()
    if not success:
        break

    frame = cv2.flip(frame, 1)
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb)

    # Layout buttons
    total_buttons = len(button_names)
    button_width = 80
    start_x = (frame_width - (button_width * total_buttons + button_spacing * (total_buttons - 1))) // 2

    button_coords.clear()
    for i, name in enumerate(button_names):
        x1 = start_x + i * (button_width + button_spacing)
        x2 = x1 + button_width
        button_coords[name] = (x1, x2)

    index_x, index_y = 0, 0

    if result.multi_hand_landmarks:
        hand_landmarks = result.multi_hand_landmarks[0]
        mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

        h, w, _ = frame.shape
        index_finger = hand_landmarks.landmark[8]
        index_x, index_y = int(index_finger.x * w), int(index_finger.y * h)

        # Button selection
        if index_y < button_height:
            for name, (x1, x2) in button_coords.items():
                if x1 < index_x < x2:
                    selected_button = name
                    if name == "Black":
                        draw_color = (0, 0, 0)
                        eraser_mode = False
                    elif name == "Red":
                        draw_color = (0, 0, 255)
                        eraser_mode = False
                    elif name == "Green":
                        draw_color = (0, 255, 0)
                        eraser_mode = False
                    elif name == "Blue":
                        draw_color = (255, 0, 0)
                        eraser_mode = False
                    elif name == "Eraser":
                        eraser_mode = True
                    elif name == "Trash":
                        canvas[:] = 0
                        drawn_mask[:] = 0
        else:
            if not eraser_mode:
                pass

        # Drawing
        if index_y > button_height:
            if prev_x == 0 and prev_y == 0:
                prev_x, prev_y = index_x, index_y

            if eraser_mode:
                cv2.circle(canvas, (index_x, index_y), 20, (0, 0, 0), -1)
                cv2.circle(drawn_mask, (index_x, index_y), 20, 0, -1)
            else:
                cv2.line(canvas, (prev_x, prev_y), (index_x, index_y), draw_color, 5)
                cv2.line(drawn_mask, (prev_x, prev_y), (index_x, index_y), 255, 5)

            prev_x, prev_y = index_x, index_y
    else:
        prev_x, prev_y = 0, 0

    # Apply drawn pixels only where drawn_mask > 0
    frame_output = frame.copy()
    frame_output[drawn_mask > 0] = canvas[drawn_mask > 0]

    # Draw UI buttons
    for name, (x1, x2) in button_coords.items():
        button_img = button_images[name]
        frame_output[0:button_height, x1:x2] = cv2.addWeighted(
            frame_output[0:button_height, x1:x2], 0.3, button_img, 0.7, 0
        )
        if selected_button == name:
            cv2.rectangle(frame_output, (x1, 0), (x2, button_height), (255, 255, 255), 3)

    # Show output
    cv2.imshow("Virtual Drawing Board", frame_output)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
